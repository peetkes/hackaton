buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://developer.marklogic.com/maven2/" }
    gradlePluginPortal()
  }
  dependencies {
    classpath "gradle.plugin.com.marklogic:ml-gradle:${mlGradleVersion}"
  }
}
plugins {
  id "java"
  id "net.saliman.properties" version "1.5.1"
  id "com.marklogic.ml-gradle" version "${mlGradleVersion}"
  id "nu.studer.credentials" version "3.0"
}

repositories {
  mavenLocal()
  mavenCentral()
  // Needed for some mlcp dependencies, such as commons-csv:1.5.1-marklogic
  maven { url "https://developer.marklogic.com/maven2/" }
}

configurations { 
  mlcp
}

dependencies {
  mlcp "com.marklogic:mlcp:${mlcpVersion}"
  mlcp files("mlcp")
}

configurations.all {
  // avoid SLF4J: classpath contains multiple SLF4J bindings
  exclude group: 'ch.qos.logback'
  exclude group: 'org.slf4j'
}
// Branding the Query Console
import com.marklogic.client.ext.helper.ClientHelper

task deployQcBrand(type: com.marklogic.gradle.task.ServerEvalTask) {
  group 'Deployment Branding'
  logger.info("QueryConsole branding.")
  client = getAppConfig().newDatabaseClient()
  xquery =
      "xquery version '1.0-ml';\n"+
          "xdmp:eval('"+
          "  xquery version \"1.0-ml\"; \n"+
          "  declare namespace env-ui = \"http://marklogic.com/environment-ui\"; \n"+
          "  let \$env-ui-node := fn:doc(\"/cluster-ui-settings.xml\")/env-ui:environment-ui \n"+
          "  return (\n"+
          "    if (exists(\$env-ui-node)) then \n"+
          "      xdmp:node-replace(\$env-ui-node/env-ui:ui-active, <env-ui:ui-active>{fn:true()}</env-ui:ui-active>)\n"+
          "    else (),\n"+
          "    if (exists(\$env-ui-node)) then \n"+
          "      xdmp:node-replace(\$env-ui-node/env-ui:ui-header-color, <env-ui:ui-header-color>"+brandingColor+"</env-ui:ui-header-color>)\n"+
          "    else (),\n"+
          "    if (exists(\$env-ui-node)) then \n"+
          "      xdmp:node-replace(\$env-ui-node/env-ui:ui-label, <env-ui:ui-label>"+brandingEnvName+"</env-ui:ui-label>)\n"+
          "    else (),\n"+
          "    if (exists(\$env-ui-node)) then \n"+
          "      xdmp:node-replace(\$env-ui-node/env-ui:ui-message, <env-ui:ui-message>"+brandingMessage+"</env-ui:ui-message>)\n"+
          "    else ()\n"+
          "    )',\n"+
          "  (),\n"+
          "  <options xmlns='xdmp:eval'>\n"+
          "    <database>{xdmp:database('App-Services')}</database>\n"+
          "  </options>)"
}

task undeployQcBrand(type: com.marklogic.gradle.task.ServerEvalTask) {
  group 'Deployment Branding'
  logger.info("Removing QueryConsole branding.")
  client = getAppConfig().newDatabaseClient()
  xquery =
      "xquery version '1.0-ml';\n"+
      "xdmp:eval('"+
      "  xquery version \"1.0-ml\"; \n"+
      "  declare namespace env-ui = \"http://marklogic.com/environment-ui\"; \n"+
      "  let \$env-ui-node := \n"+
      "    fn:doc(\"/cluster-ui-settings.xml\")/env-ui:environment-ui \n"+
      "  return \n"+
      "    if (exists(\$env-ui-node)) then \n"+
      "      xdmp:node-replace(\$env-ui-node/env-ui:ui-active, <env-ui:ui-active>{fn:false()}</env-ui:ui-active>)\n"+
      "    else ()',\n"+
      "  (),\n"+
      "  <options xmlns='xdmp:eval'>\n"+
      "    <database>{xdmp:database('App-Services')}</database>\n"+
      "  </options>)"
}

mlDeployApp.finalizedBy(deployQcBrand)
mlUndeployApp.dependsOn(undeployQcBrand)
// End Branding the query console

tasks.withType(com.marklogic.gradle.task.MlcpTask) {
  classpath = configurations.mlcp
  command = 'IMPORT'
  host = mlHost
  port = Integer.parseInt(mlRestPort)
  username = mlcpUsername
  password = mlcpPassword
  systemProperty 'hadoop.home.dir', "$project.rootDir/lib"
}

class MlcpTransformTask extends com.marklogic.gradle.task.MlcpTask {
  MlcpTransformTask() {
    classpath = project.configurations.mlcp
    command = 'IMPORT'
    host = project.property("mlHost")
    port = Integer.parseInt(project.property("mlRestPort"))
    username = project.property("mlcpUsername")
    password = project.property("mlcpPassword")
    output_uri_prefix = "/opera/import-validatie"
    systemProperty 'hadoop.home.dir', "$project.rootDir/lib"
  }
}

class HackatonTransformTask extends com.marklogic.gradle.task.MlcpTask {
  HackatonTransformTask() {
    classpath = project.configurations.mlcp
    command = 'IMPORT'
    host = project.property("mlHost")
    port = Integer.parseInt(project.property("mlRestPort"))
    username = project.property("mlcpUsername")
    password = project.property("mlcpPassword")
    output_permissions = "hackaton-reader,read,hackaton-writer,update"
    systemProperty 'hadoop.home.dir', "$project.rootDir/lib"
    transform_function= "adjust-collections"
    transform_module = "/mlcp/adjust-collections.xqy"
    transform_namespace = "http://koop.overheid.nl/hackaton/mlcp/adjust-collections"
  }
}

class SplitTransformTask extends com.marklogic.gradle.task.MlcpTask {
  SplitTransformTask() {
    classpath = project.configurations.mlcp
    command = 'IMPORT'
    host = project.property("mlHost")
    port = Integer.parseInt(project.property("mlRestPort"))
    username = project.property("mlcpUsername")
    password = project.property("mlcpPassword")
    output_permissions = "hackaton-reader,read,hackaton-writer,update"
    systemProperty 'hadoop.home.dir', "$project.rootDir/lib"
    transform_function= "split-document"
    transform_module = "/mlcp/split-document.xqy"
    transform_namespace = "http://koop.overheid.nl/hackaton/mlcp/split-document"
  }
}

class LvbbTransformTask extends com.marklogic.gradle.task.MlcpTask {
  LvbbTransformTask() {
    classpath = project.configurations.mlcp
    command = 'IMPORT'
    host = project.property("mlHost")
    port = Integer.parseInt(project.property("mlRestPort"))
    username = project.property("mlcpUsername")
    password = project.property("mlcpPassword")
    output_permissions = "opera-content-read,read,opera-opera-content-write,update,opera-opera-content-write,insert,opera-opera-content-read,read"
    systemProperty 'hadoop.home.dir', "$project.rootDir/lib"
    transform_function = "adjust-collections"
    transform_module = "/projects/opera/repos/opera/contexts/cds/lib/mlcp-adjust-collections.xqy"
    transform_namespace = "http://koop.overheid.nl/opera/opera/lib/mlcp-adjust-collections"
  }
}

task importData(type: HackatonTransformTask) {
  group "hackaton"
  input_file_path "data/aanlevering"
  output_uri_replace = ".*data/aanlevering,''"
  transform_param = "oin=00000003560458830000,idlevering=Geonovum-Omgevingsplan-Zaltbommel_004"
  args = ["-max_threads", "8"]
}

task importDataLvbb(type: LvbbTransformTask) {
  group "lvbb"
  input_file_path "data/aanlevering"
  output_uri_replace = ".*data/aanlevering,''"
  transform_param = "oin=00000003560458830000,idlevering=Geonovum-Omgevingsplan-Zaltbommel_004"
  args = ["-max_threads", "8"]
}

task importUtrecht(type: HackatonTransformTask) {
  group "hackaton"
  input_file_path "../standaard-stop/kruisvalidaties/1.1.0/Utrecht"
  output_uri_replace = ".*standaard-stop,''"
  transform_param = "oin=00000001003214345000,idlevering=utrecht-001"
  args = ["-max_threads", "8"]
}

task importUtrechtLvbb(type: LvbbTransformTask) {
  group "lvbb"
  input_file_path "../standaard-stop/kruisvalidaties/1.1.0/Utrecht"
  output_uri_replace = ".*standaard-stop,''"
  transform_param = "oin=00000001003214345000,idlevering=utrecht-001"
  args = ["-max_threads", "8"]
}

task importOpdrachtUtrecht(type: HackatonTransformTask) {
  group "hackaton"
  input_file_path "../standaard-stop/Utrecht/1.1.0/xml_voorbereidingsbesluit_provincie/opdracht_Utrecht"
  output_uri_replace = ".*standaard-stop,''"
  transform_param = "oin=00000003560458830000,idlevering=VBPU0001-001"
  args = ["-max_threads", "8"]
}

task importOpdrachtUtrechtLvbb(type: LvbbTransformTask) {
  group "lvbb"
  input_file_path "../standaard-stop/Utrecht/1.1.0/xml_voorbereidingsbesluit_provincie/opdracht_Utrecht"
  output_uri_replace = ".*standaard-stop,''"
  transform_param = "oin=00000003560458830000,idlevering=VBPU0001-001"
  args = ["-max_threads", "8"]
}

task importRoxit(type: HackatonTransformTask) {
  group "hackaton"
  input_file_path "../standaard-stop/kruisvalidaties/1.1.0/roxit"
  output_uri_replace = ".*standaard-stop,''"
  transform_param = "oin=00000001003214345000,idlevering=roxit"
  args = ["-max_threads", "8"]
}

task importRoxitLvbb(type: LvbbTransformTask) {
  group "lvbb"
  input_file_path "../standaard-stop/kruisvalidaties/1.1.0/roxit"
  output_uri_replace = ".*standaard-stop,''"
  transform_param = "oin=00000001003214345000,idlevering=roxit"
  args = ["-max_threads", "8"]
}

task importZuiderzee(type: HackatonTransformTask) {
  group "hackaton"
  input_file_path "../standaard-stop/kruisvalidaties/1.1.0/zuiderzee"
  output_uri_replace = ".*standaard-stop,''"
  transform_param = "oin=00000003560458830000,idlevering=Geonovum-wsv-Zuiderzeeland-MultigeometrieAanvulling-6"
  args = ["-max_threads", "8"]
}

task importZuiderzeeLvbb(type: LvbbTransformTask) {
  group "lvbb"
  input_file_path "../standaard-stop/kruisvalidaties/1.1.0/zuiderzee"
  output_uri_replace = ".*standaard-stop,''"
  transform_param = "oin=00000003560458830000,idlevering=Geonovum-wsv-Zuiderzeeland-MultigeometrieAanvulling-6"
  args = ["-max_threads", "8"]
}

task importZuiderzeeland(type: HackatonTransformTask) {
  group "hackaton"
  input_file_path "../standaard-stop/kruisvalidaties/1.1.0/Zuiderzeeland/opdracht-20210722-123424"
  output_uri_replace = ".*standaard-stop,''"
  transform_param = "oin=00000003011411800000,idlevering=Zuiderzeeland"
  args = ["-max_threads", "8"]
}

task importTestFileLarge(type: HackatonTransformTask) {
  group "hackaton"
  input_file_path "../standaard-stop/kruisvalidaties/1.1.0/Zuiderzeeland/opdracht-20210722-123424/owLocaties.xml"
//  input_file_path "../standaard-stop/kruisvalidaties/1.1.0/Zuiderzeeland/opdracht-20210722-123424/owRegetekst.xml"
//  input_file_path "../standaard-stop/kruisvalidaties/1.1.0/Zuiderzeeland/opdracht-20210722-123424/manifest-ow.xml"
//  input_file_path "../standaard-stop/kruisvalidaties/1.1.0/Zuiderzeeland/opdracht-20210722-123424/grondwateronttrekkingsgebiedkeringen-v4.gml"
  output_uri_replace = ".*standaard-stop,''"
  transform_param = "oin=00000003011411800000,idlevering=Zuiderzeeland"
  args = ["-max_threads", "8"]
}

task importTestFileHalf(type: HackatonTransformTask) {
  group "hackaton"
  input_file_path "data/owLocatiesHalf.xml"
  output_uri_replace = ".*data,''"
  transform_param = "oin=00000003011411800000,idlevering=Zuiderzeeland"
  args = ["-max_threads", "8"]
}

task importTestFileGebied(type: HackatonTransformTask) {
  group "hackaton"
  input_file_path "data/owLocatiesGebied.xml"
  output_uri_replace = ".*data,''"
  transform_param = "oin=00000003011411800000,idlevering=Zuiderzeeland"
  args = ["-max_threads", "8"]
}


task importTestFileGebiedengroep(type: HackatonTransformTask) {
  group "hackaton"
  input_file_path "data/owLocatiesGebiedengroep.xml"
  output_uri_replace = ".*data,''"
  transform_param = "oin=00000003011411800000,idlevering=Zuiderzeeland"
  args = ["-max_threads", "8"]
}

task importTestFileSplit(type: SplitTransformTask) {
  group "hackaton"
  input_file_path "data/aanlevering/owLocaties-Gemeentestad.xml"
//  input_file_path "../standaard-stop/kruisvalidaties/1.1.0/Zuiderzeeland/opdracht-20210722-123424/owRegetekst.xml"
//  input_file_path "../standaard-stop/kruisvalidaties/1.1.0/Zuiderzeeland/opdracht-20210722-123424/manifest-ow.xml"
//  input_file_path "../standaard-stop/kruisvalidaties/1.1.0/Zuiderzeeland/opdracht-20210722-123424/grondwateronttrekkingsgebiedkeringen-v4.gml"
  output_uri_replace = ".*data/aanlevering,''"
  transform_param = "oin=00000003011411800000,idlevering=Zuiderzeeland"
  args = ["-max_threads", "8"]
}

task importZuiderzeelandLvbb(type: LvbbTransformTask) {
  group "lvbb"
  input_file_path "../standaard-stop/kruisvalidaties/1.1.0/Zuiderzeeland/opdracht-20210722-123424"
  output_uri_replace = ".*standaard-stop,''"
  transform_param = "oin=00000003011411800000,idlevering=Zuiderzeeland"
  args = ["-max_threads", "8"]
}

task loadData(
    dependsOn: ['importData','importUtrecht','importOpdrachtUtrecht','importRoxit', 'importZuiderzee']
)

task loadDataLvbb(
    dependsOn: ['importDataLvbb','importUtrechtLvbb','importOpdrachtUtrechtLvbb','importRoxitLvbb', 'importZuiderzeeLvbb', 'importZuiderzeelandLvbb']
)

task importKruisvalidatie(type: com.marklogic.gradle.task.MlcpTask) {
  group "import"
  input_file_path "../standaard-stop/kruisvalidaties/kruisvalidaties-utrecht-2.json"
  output_collections = "hackaton/utrecht,type/rapport"
  output_uri_replace = ".*standaard-stop,''"
  args = ["-max_threads", "8"]
}

class IngestOntologyTask extends com.marklogic.gradle.task.MlcpTask {
  IngestOntologyTask() {
    classpath = project.configurations.mlcp
    username = project.property("mlcpUsername")
    password = project.property("mlcpPassword")
    command = "IMPORT"
    mode="local"
    thread_count=Integer.parseInt(project.property("mlcpThreadCount"))
    batch_size=Integer.parseInt(project.property("mlcpBatchSize"))
    input_file_path = project.getProperty("mlcpOntologyPath")
    input_file_type = "RDF"
  }
}

String[] ontologies = [
    "imow-ontology"
];

ontologies.each{ ontology ->
  def taskName = "loadOntology-" + ontology;
  tasks.create (name: taskName, type: IngestOntologyTask) {
    logger.info("creating task " + taskName)
    group "LVBB Ontology"
    port = Integer.parseInt(project.property("mlRestPort"))
    input_file_pattern = ontology + "\\.(ttl|rdf)"
    output_uri_prefix='/ontology/' + ontology + "/"
    output_permissions = "rest-reader,read,rest-writer,update"
    output_graph = "/graph/" + ontology
    output_collections = "type/Ontology"
  }
};

task clearOntology(type: com.marklogic.gradle.task.ServerEvalTask) {
//  client = mlAppConfig.newDatabaseClient()
  xquery = "xquery version \"1.0-ml\";\n" +
      "xdmp:collection-delete(\"type/Ontology\")"
}

task loadOntologies(
    dependsOn: ['clearOntology','loadOntology-imow-ontology']
)

