<export><workspace name="Valideren Kruisvalidaties"><query name="test OW tdes" focus="true" listorder="1" taborder="1" active="true" database="3444400608675009663" server="11241090501015656619" database-name="hackaton-content" server-name="hackaton" mode="xquery">xquery version "1.0-ml";
import module namespace tde = "http://marklogic.com/xdmp/tde" at "/MarkLogic/tde.xqy";

let $tde := xdmp:invoke-function(function() {fn:doc("/tdej/informatieobject.tdej")},map:map()=&gt;map:with("database",xdmp:schema-database()))
let $doc := fn:doc("/GIO001-Bedrijf_categorie_2.xml")
let $doc := fn:doc("/kruisvalidaties/1.1.0/Utrecht/manifest-ow.xml")
let $doc := fn:doc("/kruisvalidaties/1.1.0/Utrecht/manifest-bhkv.xml")
let $doc := fn:doc("/manifest-ow.xml")
let $doc := fn:doc("/owLocaties-Gemeentestad.xml")
let $ow-tdes := xdmp:invoke-function(
  function() {
    cts:uri-match("/tdej/ow-*") ! fn:doc(.),
    fn:doc("/tdej/gml-bestand.tdej")
  },
  map:map()
  =&gt;map:with("database",xdmp:schema-database())
)
return (
(:)  $ow-tdes ! tde:validate(.),:)
  tde:node-data-extract($doc, $ow-tdes)
)
</query><query name="Describe" focus="false" listorder="2" taborder="2" active="true" database="3444400608675009663" server="11241090501015656619" database-name="hackaton-content" server-name="hackaton" mode="sparql">## query
DESCRIBE &lt;urn:uuid:000cd7d2-58cf-4a80-b9c0-8463c7f35e38&gt;</query><query name="Query 1" focus="false" listorder="3" taborder="3" active="true" database="3444400608675009663" server="11241090501015656619" database-name="hackaton-content" server-name="hackaton" mode="sparql">## query
PREFIX rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; 
PREFIX lvbb: &lt;http://koop.overheid.nl/ontology/lvbb/&gt;

SELECT ?ioVersie
WHERE {
  ?regeling lvbb:workId "/akn/nl/act/gm0297/2019/reg456" .
  ?ioVersie lvbb:heeftGeboorteregeling ?regeling.
  ?ioWerk lvbb:heeftVersie ?ioVersie ;
          lvbb:workId ?ioWerkId .
}</query><query name="Query 2" focus="false" listorder="4" taborder="4" active="true" database="3444400608675009663" server="11241090501015656619" database-name="hackaton-content" server-name="hackaton" mode="sparql">## query
PREFIX lvbb: &lt;http://koop.overheid.nl/ontology/lvbb/&gt;
PREFIX imow: &lt;http://www.geostandaarden.nl/imow/&gt;
prefix rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;
prefix rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;
PREFIX imowType: &lt;http://www.geostandaarden.nl/imow/objecttype/&gt;

SELECT ?regelingId ?doelId ?ow ?bestand ?ow2 ?gebied ?gmlId
WHERE {
  VALUES (?akn) { ("/akn/nl/act/pv26/2021/3_2RGL-20210519-203227") }
  ?regelingId lvbb:linkToOwObject ?mow ;
              rdfs:label ?akn ;
              rdf:type lvbb:Regeling ;
              lvbb:heeftVersie ?versie .
  ?versie lvbb:doel ?doelId .
  ?doelId lvbb:linkToOwObject ?mow ;
          rdf:type lvbb:Doel .
  ?mow rdf:type imowType:Gebied ;
      imow:bestandsnaam ?bestand .
  ?ow imow:bestand ?bestand ;
      imow:heeftRegelingsgebied ?regelingsGebied .
  ?regelingsGebied imow:locatieaanduiding ?loc .
}</query><query name="Maak KruisvalidatieRapport" focus="false" listorder="5" taborder="5" active="true" database="3444400608675009663" server="11241090501015656619" database-name="hackaton-content" server-name="hackaton" mode="xquery">xquery version "1.0-ml";
import module namespace kv = "http://hackaton.com/kruisvalidaties/rapport" at "/ext/kruisvalidaties/rapport.xqy";

declare option xdmp:mapping "false";

let $gemeentestad := map:map()
=&gt;map:with("collection", "hackaton/aanlevering")
=&gt;map:with("bindings", map:map()
  =&gt;map:with("akn", "/akn/nl/act/gm0297/2019/reg456"))
let $utrecht := map:map()
=&gt;map:with("collection", "hackaton/utrecht")
=&gt;map:with("bindings", map:map()
  =&gt;map:with("akn", "/akn/nl/act/pv26/2021/3_2RGL-20210519-203227"))
  
let $map := $gemeentestad
let $result := map:map()

let $query :=  cts:collection-query(map:get($map,"collection"))
let $store := (sem:store("document", $query),sem:store("properties", $query))
let $doelen :=  sem:sparql($kv:SPARQL-REFERENTIES-PER-DOEL, (), ("map"), $store)
let $_ :=
  for $doel in $doelen
  return map:put($result, map:get($doel, "doelId"), 
    map:map()
    =&gt;map:with("geometrieIdentificaties", sem:sparql($kv:SPARQL-GEOMETRIE-IDENTIFICATIES, $doel, (), $store))
    =&gt;map:with("referentiesPerRegeling", sem:sparql($kv:SPARQL-REFERENTIES-PER-REGELING, $doel, (), $store))
  )
let $referentiesPerRegeling := fn:fold-left(
  function($z, $a) {
    let $regelingId := map:get($a, "regelingId")
    let $wId := map:get($a, "wId")
    let $regeltekstId := map:get($a, "regeltekstId")
    let $object := object-node {
      "regeltekstId": $regeltekstId, 
      "wId": $wId
    }
    return (
      if (map:contains($z, $regelingId))
      then map:put($z, $regelingId, (map:get($z, $regelingId), $object))
      else map:put($z, $regelingId, $object),
      $z
    )
  }, 
  map:map(), 
  map:get(map:get($result, "/join/id/proces/gm0297/2019/Instelling"), "referentiesPerRegeling")
)
for $doel in ($doelen !  map:get(., "doelId"))
return (
  object-node {
    "doel": $doel,
    "referentiesPerDoel": array-node {
      object-node {
        "geometrieIdentificaties": array-node {
          map:get(map:get($result, $doel),"geometrieIdentificaties") ! map:get(., "gmlId") 
        },
        "referentiesPerRegeling": array-node {
          for $regeling in map:keys($referentiesPerRegeling)
          return map:get($referentiesPerRegeling, $regeling)
        }       
      }    
    }
  },
  $referentiesPerRegeling
(:  kv:maak-rapport($doelen !  map:get(., "doelId"), $result):)
)</query><query name="Query 4" focus="false" listorder="6" taborder="6" active="true" database="3444400608675009663" server="11241090501015656619" database-name="hackaton-content" server-name="hackaton" mode="xquery">xquery version "1.0-ml";

declare function local:referentiesPerDoel(
  $items as item()*
) as item()* 
{
  fn:fold-left(function($z, $a) { $z + 1 }, 0, $items)
};

let $report := fn:collection("type/rapport")
for $referentiesTeValideren in $report/referentiesTeValideren
let $doel := $referentiesTeValideren/doel
return (
  "doel " || $doel,
  $referentiesTeValideren/referentiesPerDoel ! ("Aantal geometrieIdentificaties " || local:referentiesPerDoel(./geometrieIdentificaties)),
  $referentiesTeValideren/referentiesPerDoel ! (
    "regelingId " || ./wIdRegeling,
    "Aantal referentiesPerRegeling " || local:referentiesPerDoel(./referentiesPerRegeling)),
  $report
)
</query><query name="Query 5" focus="false" listorder="7" taborder="7" active="true" database="3444400608675009663" server="11241090501015656619" database-name="hackaton-content" server-name="hackaton" mode="sparql">## query
PREFIX lvbb: &lt;http://koop.overheid.nl/ontology/lvbb/&gt;
PREFIX imow: &lt;http://www.geostandaarden.nl/imow/&gt;
prefix rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;
prefix rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;
PREFIX imowType: &lt;http://www.geostandaarden.nl/imow/objecttype/&gt;


SELECT ?geoLocatie ?gmlId ?type
WHERE {
  ?doel lvbb:linkToOwObject ?ow ;
          rdf:type lvbb:doel ;
          rdfs:label "/join/id/proces/gm0297/2019/Instelling" .
  ?ow rdf:type imowType:Gebied;
      imow:bestandsnaam ?bestand .
  ?ow2 imow:bestand ?bestand ;
       imow:heeftGebied ?gebied .
  ?gebied rdf:type imow:Gebied ;
          imow:geometrie ?geoLocatie .
  ?geoLocatie rdf:type ?type ;
              rdfs:label ?gmlId
}</query><query name="test STOP tdes" focus="false" listorder="8" taborder="8" active="true" database="3444400608675009663" server="11241090501015656619" database-name="hackaton-content" server-name="hackaton" mode="xquery">xquery version "1.0-ml";
import module namespace tde = "http://marklogic.com/xdmp/tde" at "/MarkLogic/tde.xqy";

let $doc := fn:doc("/akn_nl_bill_gm0297-3520-01.xml")
let $doc := xdmp:document-properties("/kruisvalidaties/1.1.0/Utrecht/aandachtsgebiedstiltegebied-v1.gml")
let $stop-tdes := xdmp:invoke-function(
  function() {
    fn:doc("/tdej/besluit.tdej"),
    fn:doc("/tdej/informatie-object.tdej"),
    fn:doc("/tdej/regeling.tdej"),
    fn:doc("/tdej/gml-bestand.tdej")
  },
  map:map()
  =&gt;map:with("database",xdmp:schema-database())
)
return (
  $stop-tdes ! tde:validate(.),
  tde:node-data-extract($doc, $stop-tdes)
)
</query><query name="Query 6" focus="false" listorder="9" taborder="9" active="true" database="3444400608675009663" server="11241090501015656619" database-name="hackaton-content" server-name="hackaton" mode="xquery">xquery version "1.0-ml";
fn:fold-left(function($z, $a) {
  xdmp:trace("lvbb-test", "z=" || xdmp:quote($z)),
  if (map:contains($z, $a))
  then map:put($z, $a, (map:get($z, $a), $a))
  else (map:put($z, $a, $a)),
  xdmp:trace("lvbb-test", "z=" || xdmp:quote($z)),
  $z
}, map:map(), ("a","b","c"))</query><query name="Query 7" focus="false" listorder="10" taborder="10" active="true" database="3444400608675009663" server="11241090501015656619" database-name="hackaton-content" server-name="hackaton" mode="xquery">xquery version "1.0-ml";


object-node {
    "hallo": "wereld"
  }
</query><query name="Query 8" focus="false" listorder="11" taborder="11" active="true" database="3444400608675009663" server="11241090501015656619" database-name="hackaton-content" server-name="hackaton" mode="xquery">xquery version "1.0-ml";

declare function local:maak-kruisvalidatie-rapport(
  $doelen as xs:string*,
  $map as map:map
) as item()*
{
  object-node {
    "identificatie": sem:uuid(),
    "meldingen": array-node {},
    "referentie": sem:uuid(),
    "referentiesTeValideren": array-node {
      for $doel in $doelen
      return object-node {
        "doel": $doel
      }
    }
  }
};

local:maak-kruisvalidatie-rapport("/join/id/slah/di/blah", map:map())</query><query name="Query 9" focus="false" listorder="12" taborder="12" active="true" database="3444400608675009663" server="11241090501015656619" database-name="hackaton-content" server-name="hackaton" mode="xquery">xquery version "1.0-ml";
import module namespace kv = "http://hackaton.com/kruisvalidaties/rapport" at "/ext/kruisvalidaties/rapport.xqy";

declare option xdmp:mapping "false";

declare variable $SPARQL-PREFIX as xs:string := '
PREFIX lvbb: &lt;http://koop.overheid.nl/ontology/lvbb/&gt;
PREFIX imow: &lt;http://www.geostandaarden.nl/imow/&gt;
PREFIX rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;
PREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;
PREFIX imowType: &lt;http://www.geostandaarden.nl/imow/objecttype/&gt;
';
declare variable $SPARQL-REFERENTIES-PER-DOEL as xs:string :=  $SPARQL-PREFIX || '
SELECT distinct ?doelId ?regelingId
WHERE {
  ?regeling rdfs:label ?regelingId ;
            rdf:type lvbb:Regeling ;
            lvbb:heeftVersie ?versie ;
            lvbb:linkToOwObject ?mow .
  ?versie lvbb:vastgesteldDoorDoel ?doel .
  ?doel rdf:type lvbb:doel ;
        rdfs:label ?doelId ;
        lvbb:linkToOwObject ?mow .
}
';

declare variable $SPARQL-GEOMETRIE-IDENTIFICATIES as xs:string :=  $SPARQL-PREFIX || '
SELECT ?gmlId
WHERE {
  ?doel lvbb:linkToOwObject ?ow ;
          rdf:type lvbb:doel ;
          rdfs:label @doelId .
  ?ow rdf:type imowType:Gebied;
      imow:bestandsnaam ?bestand .
  ?ow2 imow:bestand ?bestand ;
       imow:heeftGebied ?gebied .
  ?gebied rdf:type imow:Gebied ;
          imow:geometrie ?geoLocatie .
  ?geoLocatie rdf:type ?type ;
              rdfs:label ?gmlId

}
';
declare variable $SPARQL-REFERENTIES-PER-REGELING as xs:string :=  $SPARQL-PREFIX || '
SELECT ?regelingId ?wId ?regeltekstId
WHERE {
  ?regeling lvbb:linkToOwObject ?ow ;
              rdfs:label ?regelingId ;
              rdf:type lvbb:Regeling ;
              lvbb:heeftVersie ?versie .
  ?versie lvbb:vastgesteldDoorDoel ?doel .
  ?doel lvbb:linkToOwObject ?ow ;
          rdf:type lvbb:doel ;
          rdfs:label @doelId .
  ?ow rdf:type imowType:Regeltekst;
      imow:bestandsnaam ?bestand .
  ?ow2 imow:bestand ?bestand ;
       imow:heeftRegeltekst ?regeltekst .
  ?regeltekst rdf:type imow:Regeltekst ;
          rdfs:label ?regeltekstId ;
          lvbb:linkToWId ?wRef .
  ?wRef rdfs:label ?wId .
}
ORDER BY ?regelingId ?regeltekstId
';

declare function local:maak-rapport(
  $doelen as map:map*,
  $store as sem:store*
) as item()*
{
  object-node {
    "identificatie": sem:uuid(),
    "meldingen": array-node {},
    "referentie": sem:uuid(),
    "referentiesTeValideren": array-node {
      for $doel in $doelen
      let $doelId := map:get($doel, "doelId")
      let $regelingId := map:get($doel, "regelingId")
      let $geometrieIdentificaties :=  sem:sparql($kv:SPARQL-GEOMETRIE-IDENTIFICATIES, $doel, (), $store)
      let $referentiesPerDoel := sem:sparql($kv:SPARQL-REFERENTIES-PER-REGELING, $doel, (), $store)
      return object-node {
        "doel": $doel,
        "referentiesPerDoel": array-node {
          object-node {
            "geometrieIdentificaties": array-node {
              map:get(map:get($geometrieIdentificaties, $doel),"geometrieIdentificaties") ! map:get(., "gmlId")
            },
            "wIdRegeling": $regelingId
          }
        }
      }
    }
  }
};

let $gemeentestad := map:map()
=&gt;map:with("collection", "hackaton/aanlevering")
=&gt;map:with("bindings", map:map()
  =&gt;map:with("akn", "/akn/nl/act/gm0297/2019/reg456"))
let $utrecht := map:map()
=&gt;map:with("collection", "hackaton/utrecht")
=&gt;map:with("bindings", map:map()
  =&gt;map:with("akn", "/akn/nl/act/pv26/2021/3_2RGL-20210519-203227"))
  
let $map := $utrecht
let $result := map:map()

let $query :=  cts:collection-query(map:get($map,"collection"))
let $store := (sem:store("document", $query),sem:store("properties", $query))
let $doelen :=  sem:sparql($kv:SPARQL-REFERENTIES-PER-DOEL, (), ("map"), $store)
(:return local:maak-rapport($doelen, $store):)
return object-node {
  "identificatie": sem:uuid(),
  "meldingen": array-node {},
  "referentie": sem:uuid(),
  "referentiesTeValideren": array-node {
    for $doel in $doelen
    let $doelId := map:get($doel, "doelId")
    let $regelingId := map:get($doel, "regelingId")
    let $geometrieIdentificaties :=  sem:sparql($kv:SPARQL-GEOMETRIE-IDENTIFICATIES, $doel, (), $store)
    let $referentiesPerDoel := sem:sparql($kv:SPARQL-REFERENTIES-PER-REGELING, $doel, (), $store)
    return object-node {
      "doel": $doelId,
      "referentiesPerDoel": array-node {
        object-node {
          "geometrieIdentificaties": array-node { $geometrieIdentificaties ! map:get(., "gmlId") },
          "referentiesPerRegeling": array-node { $referentiesPerDoel ! object-node { "regeltekstId": map:get(., "regeltekstId"), "wId": map:get(., "wId") } },
          "wIdRegeling": $regelingId
        }
      }
    }
  }
}</query><query name="Query 10" focus="false" listorder="13" taborder="13" active="true" database="3444400608675009663" server="11241090501015656619" database-name="hackaton-content" server-name="hackaton" mode="sparql">## query
PREFIX lvbb: &lt;http://koop.overheid.nl/ontology/lvbb/&gt;
PREFIX imow: &lt;http://www.geostandaarden.nl/imow/&gt;
prefix rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;
prefix rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;
PREFIX imowType: &lt;http://www.geostandaarden.nl/imow/objecttype/&gt;

SELECT distinct ?objectType
WHERE {
   {
     ?s imow:heeftobjectType ?objectType ;
        imow:bestand ?bestand .
   }
   UNION 
   {
     ?mow imow:bestandsnaam ?bestand ;
          imow:heeftobjectType ?objectType
   }
}
</query></workspace></export>
