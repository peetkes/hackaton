<export><workspace name="Valideren Kruisvalidaties"><query name="test OW tdes" focus="false" listorder="1" taborder="1" active="true" database="80880676294143955" server="9495204545860005312" database-name="hackaton-content" server-name="hackaton" mode="xquery" optimize="">xquery version "1.0-ml";
import module namespace tde = "http://marklogic.com/xdmp/tde" at "/MarkLogic/tde.xqy";
declare namespace lvbba = "https://standaarden.overheid.nl/lvbb/stop/aanlevering/";
declare namespace data = "https://standaarden.overheid.nl/stop/imop/data/";

let $tde := xdmp:invoke-function(function() {fn:doc("/tdej/informatieobject.tdej")},map:map()=&gt;map:with("database",xdmp:schema-database()))
let $uri := "/GIO001-Bedrijf_categorie_2.xml"
let $uri := "/kruisvalidaties/1.1.0/Utrecht/manifest-ow.xml"
let $uri := "/kruisvalidaties/1.1.0/Utrecht/manifest-bhkv.xml"
let $uri := "/owActiviteiten-Gemeentestad.xml"
let $uri := "/akn_nl_bill_gm0297-3520-01.xml"
let $uri := "/kruisvalidaties/1.1.0/roxit/AanleveringBesluit.xml"
let $uri := "/owLocaties-Gemeentestad.xml"
let $uri := "/manifest-ow.xml"
let $uri := "/GIO001-Bedrijf_categorie_2.xml"
let $doc := fn:doc($uri)
let $ow-tdes := xdmp:invoke-function(
  function() {
    cts:uri-match("/tdej/ow-*") ! fn:doc(.),
    fn:doc("/tdej/gml-bestand.tdej")
  },
  map:map()
  =&gt;map:with("database",xdmp:schema-database())
)
let $stop-tdes := xdmp:invoke-function(
  function() {
    fn:doc("/tdej/besluit.tdej"),
    fn:doc("/tdej/informatie-object.tdej"),
    fn:doc("/tdej/regeling.tdej")
  },
  map:map()
  =&gt;map:with("database",xdmp:schema-database())
)
return (
tde:validate($stop-tdes),
  tde:node-data-extract($doc, $stop-tdes)
)
</query><query name="Describe" focus="false" listorder="2" taborder="2" active="true" database="80880676294143955" server="9495204545860005312" database-name="hackaton-content" server-name="hackaton" mode="sparql" optimize="">## query
DESCRIBE &lt;ws0650_4__chp_1__subchp_1.1__art_1.1.4__para_1.1.4.1&gt;</query><query name="Referenties Per Doel" focus="false" listorder="3" taborder="3" active="true" database="80880676294143955" server="9495204545860005312" database-name="hackaton-content" server-name="hackaton" mode="sparql" optimize="">## query
PREFIX lvbb: &lt;http://koop.overheid.nl/ontology/lvbb/&gt;
PREFIX imow: &lt;http://koop.overheid.nl/ontology/imow/&gt;
PREFIX rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;
PREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;
PREFIX dc: &lt;http://purl.org/dc/elements/1.1/&gt;

SELECT distinct ?doelId ?regelingId
WHERE {
  ?owAanlevering  imow:linkToDoel ?doel ;
                  imow:linkToRegelingObject ?regeling .
  ?doel rdf:type lvbb:doel ;
        dc:identifier ?doelId .
  ?versie lvbb:vastgesteldDoorDoel ?doel .
  ?regeling lvbb:heeftVersie ?versie ;
            rdf:type lvbb:Regeling ;
            dc:identifier ?regelingId .
}</query><query name="Geometrie Identificaties" focus="false" listorder="4" taborder="4" active="true" database="80880676294143955" server="9495204545860005312" database-name="hackaton-content" server-name="hackaton" mode="sparql" optimize="">## query
PREFIX lvbb: &lt;http://koop.overheid.nl/ontology/lvbb/&gt;
PREFIX imow: &lt;http://koop.overheid.nl/ontology/imow/&gt;
PREFIX rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;
PREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;
PREFIX dc: &lt;http://purl.org/dc/elements/1.1/&gt;

SELECT ?gmlId
WHERE {
  VALUES (?doelId) {("/join/id/proces/gm0297/2019/Instelling")}
  ?owAanlevering imow:linkToDoel ?doel ;
                 imow:heeftBestand ?owLink .
  ?doel dc:identifier ?doelId .
  ?owBestand imow:linkToManifestBestand ?owLink ;
             rdf:type imow:owBestand ;
             imow:heeftGebied ?gebied .
  ?gebied imow:heeftGeometrieRef ?geometrie .
  ?geometrie dc:identifier ?gmlId
}</query><query name="Validate Objecttype OW Bestand" focus="false" listorder="5" taborder="7" active="true" database="80880676294143955" server="9495204545860005312" database-name="hackaton-content" server-name="hackaton" mode="sparql" optimize="">## query
PREFIX imow: &lt;http://koop.overheid.nl/ontology/imow/&gt;
prefix rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;
prefix rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;

SELECT ?objectType ?type
WHERE {
  ?bestand rdf:type imow:owBestand ;
           imow:heeftObjectType ?objectType .
  OPTIONAL { ?objectType rdfs:label ?type . }
  MINUS {
    SELECT ?objectType ?type
    WHERE {
      ?aanlevering rdf:type imow:Aanlevering ;
                   imow:heeftBestand ?bestand .
      ?bestand rdf:type imow:Bestand ;
               imow:heeftObjectType ?objectType .
      OPTIONAL { ?objectType rdfs:label ?type . }
    }    
  }
}</query><query name="Referenties Per Regeling" focus="false" listorder="6" taborder="5" active="true" database="80880676294143955" server="9495204545860005312" database-name="hackaton-content" server-name="hackaton" mode="sparql" optimize="">## query
PREFIX lvbb: &lt;http://koop.overheid.nl/ontology/lvbb/&gt;
PREFIX imow: &lt;http://koop.overheid.nl/ontology/imow/&gt;
PREFIX rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;
PREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;
PREFIX dc: &lt;http://purl.org/dc/elements/1.1/&gt;

SELECT ?regelingId ?wRef ?regeltekstId
WHERE {
  VALUES (?doelId) {("/join/id/proces/ws0650/2021-07-14/aanvullingmultigeometrie")}
  ?owAanlevering imow:linkToDoel ?doel ;
                 imow:heeftBestand ?owLink ;
                 imow:linkToRegelingObject ?regeling .
  ?doel dc:identifier ?doelId .
  ?regeling dc:identifier ?regelingId ;
            rdf:type lvbb:Regeling .
  ?owBestand imow:linkToManifestBestand ?owLink ;
           rdf:type imow:owBestand ;
           imow:heeftRegeltekst ?regeltekst .
  ?regeltekst rdf:type imow:Regeltekst ;
              dc:identifier ?regeltekstId ;
              imow:linkToWId ?wRef .
#  ?wRef dc:identifier ?wId .
}
ORDER BY ?regelingId ?regeltekstId</query><query name="test STOP tdes" focus="false" listorder="7" taborder="8" active="true" database="80880676294143955" server="9495204545860005312" database-name="hackaton-content" server-name="hackaton" mode="xquery" optimize="">xquery version "1.0-ml";
import module namespace tde = "http://marklogic.com/xdmp/tde" at "/MarkLogic/tde.xqy";

let $doc := fn:doc("/akn_nl_bill_gm0297-3520-01.xml")
let $doc := xdmp:document-properties("/kruisvalidaties/1.1.0/Utrecht/aandachtsgebiedstiltegebied-v1.gml")
let $stop-tdes := xdmp:invoke-function(
  function() {
    fn:doc("/tdej/besluit.tdej"),
    fn:doc("/tdej/informatie-object.tdej"),
    fn:doc("/tdej/regeling.tdej"),
    fn:doc("/tdej/gml-bestand.tdej")
  },
  map:map()
  =&gt;map:with("database",xdmp:schema-database())
)
return (
  $stop-tdes ! tde:validate(.),
  tde:node-data-extract($doc, $stop-tdes)
)
</query><query name="Validate ObjectTypes" focus="false" listorder="8" taborder="9" active="true" database="80880676294143955" server="9495204545860005312" database-name="hackaton-content" server-name="hackaton" mode="xquery" optimize="">xquery version "1.0-ml";
import module namespace kv = "http://hackaton.com/kruisvalidaties/rapport" at "/ext/kruisvalidaties/rapport.xqy";

let $intersect_manifest := kv:intersect($kv:SPARQL-OBJECTTYPEN-MANIFEST, $kv:SPARQL-OBJECTTYPEN-OWBESTAND, ())
let $intersect_ow := kv:intersect($kv:SPARQL-OBJECTTYPEN-OWBESTAND, $kv:SPARQL-OBJECTTYPEN-MANIFEST, ())

return (
  $intersect_manifest,
  '---',
  $intersect_ow,
  "----",
  if (fn:empty($intersect_manifest) and fn:empty($intersect_ow))
  then "OK"
  else if (fn:empty($intersect_manifest))
  then "OW heeft waarde(n) die niet in manifest-ow staat: " || fn:string-join(($intersect_ow ! map:get(.,"type")), ',')
  else "manifest-ow heeft waarden die niet voorkomen in ow bestanden:" || fn:string-join(($intersect_manifest ! map:get(.,"type")), ',')
)</query><query name="Query 7" focus="true" listorder="9" taborder="10" active="true" database="80880676294143955" server="9495204545860005312" database-name="hackaton-content" server-name="hackaton" mode="xquery" optimize="">xquery version "1.0-ml";
import module namespace kv = "http://hackaton.com/kruisvalidaties/rapport" at "/ext/kruisvalidaties/rapport.xqy";

declare private function local:maak-fout-rapport(
  $rapport as item()*
) as item()*
{
  json:object()
  =&gt;map:with("identificatie", sem:uuid())
  =&gt;map:with("referentie", sem:uuid())
  =&gt;map:with("status", "NOK")
  =&gt;map:with("typeRapport", "REFERENTIES")
  =&gt;map:with("meldingen", ($rapport,
  object-node {
    "code": "EINDE CONTROLES",
    "omschrijving": "De controles zijn helemaal klaar, maar met FATALE fouten.",
    "detail": "EINDE CONTROLE"
  }))
  =&gt;map:with("referentiesTeValideren", array-node {})
};

declare function local:maak-kruisvalidatie-rapport(
  $oin as xs:string,
  $idlevering as xs:string
) as item()*
{
  let $query := cts:or-query((
    cts:and-query((
      cts:collection-query(fn:concat("/opera/oin/", $oin)),
      cts:collection-query(fn:concat("/opera/idlevering/", $idlevering)),
      cts:collection-query("/opera/options/opdrachtbestanden")
    )),
    cts:collection-query("/graph/imow-ontology")
  ))
  let $stores := (sem:store("document", $query), sem:store("properties", $query))
  let $validatie := kv:check-object-types($stores)
  return
    if (fn:empty($validatie))
    then local:maak-goed-rapport($stores)
    else local:maak-fout-rapport($validatie)
};

declare function local:get-wId(
  $item as item()
) as xs:string?
{
  let $wRef := map:get($item, "wRef")
  let $wId := map:get($item, "wId")
  return ($wId, fn:tokenize(fn:string($wRef),"/")[last()])[1]
};

declare private function local:maak-goed-rapport(
  $stores as sem:store*
) as item()*
{
  let $doelen := sem:sparql($kv:SPARQL-REFERENTIES-PER-DOEL, (), ("map"), $stores)
  return
    object-node {
    "identificatie": sem:uuid(),
    "referentie": sem:uuid(),
    "status": "OK",
    "typeRapport": "REFERENTIES",
    "meldingen": array-node {},
    "referentiesTeValideren": array-node {
      for $doel in $doelen
      let $doelId := map:get($doel, "doelId")
      let $regelingId := map:get($doel, "regelingId")
      let $geometrieIdentificaties :=  sem:sparql($kv:SPARQL-GEOMETRIE-IDENTIFICATIES, $doel, (), $stores)
      let $referentiesPerDoel := sem:sparql($kv:SPARQL-REFERENTIES-PER-REGELING, $doel, (), $stores)
      return object-node {
        "doel": $doelId,
        "referentiesPerDoel": array-node {
          object-node {
            "geometrieIdentificaties": array-node { $geometrieIdentificaties ! map:get(., "gmlId") },
            "referentiesPerRegeling": array-node { 
              for $referentie in $referentiesPerDoel
              let $wId := local:get-wId($referentie)
              let $found := map:contains($referentie, "wId") and map:get($referentie, "wId") ne ()
              return object-node { 
                "regeltekstId": map:get($referentie, "regeltekstId"), 
                "wId": $wId,
                "found": $found
              } 
            },
            "wIdRegeling": $regelingId
          }
        }
      }
    }
  }
};

let $gemeentestad := map:map()
=&gt;map:with("oin", "00000003560458830000")
=&gt;map:with("idlevering", "Geonovum-Omgevingsplan-Zaltbommel_004")

let $opdracht-utrecht := map:map()
=&gt;map:with("oin", "00000003560458830000")
=&gt;map:with("idlevering", "VBPU0001-001")

let $utrecht := map:map()
=&gt;map:with("oin", "00000001003214345000")
=&gt;map:with("idlevering", "utrecht-001")

let $roxit := map:map()
=&gt;map:with("oin", "00000001003214345000")
=&gt;map:with("idlevering", "roxit")

let $zuiderzee := map:map()
=&gt;map:with("oin", "00000003560458830000")
=&gt;map:with("idlevering", "Geonovum-wsv-Zuiderzeeland-MultigeometrieAanvulling-6")

let $zuiderzeeland := map:map()
=&gt;map:with("oin", "00000003011411800000")
=&gt;map:with("idlevering", "Zuiderzeeland")
    
let $map := $zuiderzee

let $query := cts:or-query((
  cts:and-query((
    cts:collection-query(fn:concat("/opera/oin/", map:get($map, "oin"))),
    cts:collection-query(fn:concat("/opera/idlevering/", map:get($map, "idlevering"))),
    cts:collection-query("/opera/options/opdrachtbestanden")
  )),
  cts:collection-query("/graph/imow-ontology")
))
let $stores := (sem:store("document", $query), sem:store("properties", $query))

return (
  kv:maak-kruisvalidatie-rapport(map:get($map,"oin"), map:get($map, "idlevering"))
)
</query><query name="Query 8" focus="false" listorder="10" taborder="11" active="true" database="80880676294143955" server="9495204545860005312" database-name="hackaton-content" server-name="hackaton" mode="xquery" optimize="">xquery version "1.0-ml";
import module namespace kv = "http://hackaton.com/kruisvalidaties/rapport" at "/ext/kruisvalidaties/rapport.xqy";

declare option xdmp:mapping "false";

declare function local:check-object-types(
  $store as sem:store*
) as item()*
{
  let $object-types := sem:sparql($kv:SPARQL-DISTINCT_OBJECTTYPES,(),(),())
  let $all-allowed := every $type in  $object-types ! kv:get-object-type(.) satisfies $type = $kv:ALLOWED_OBJECTTYPES
  let $intersect := kv:intersect($store)
  return ($object-types, "--",$intersect)
(:)    if ($all-allowed)
    then ()
    else (
      local:check-allowed-object-types($object-types)
    )
:)
};

declare function local:intersect(
  $store as sem:store*
) as item()*
{
  let $sparql := $kv:SPARQL-PREFIX || '
SELECT ?objectType ?type
WHERE {
  ?aanlevering rdf:type imow:Aanlevering ;
               imow:heeftBestand ?bestand .
  ?bestand rdf:type imow:Bestand ;
           imow:heeftObjectType ?objectType .
  ?objectType rdfs:label ?type .
  MINUS {
    SELECT ?objectType ?type
    WHERE {
      ?bestand rdf:type imow:owBestand ;
               imow:heeftObjectType ?objectType .
      OPTIONAL { ?objectType rdfs:label ?type .}
    }
  }
}
  '
  return sem:sparql($sparql,(),(),$store)
};



let $gemeentestad := map:map()
=&gt;map:with("oin", "00000003560458830000")
=&gt;map:with("idlevering", "/opera/idlevering/Geonovum-Omgevingsplan-Zaltbommel_004")

let $opdracht-utrecht := map:map()
=&gt;map:with("oin", "00000003560458830000")
=&gt;map:with("idlevering", "VBPU0001-001")

let $utrecht := map:map()
=&gt;map:with("oin", "00000001003214345000")
=&gt;map:with("idlevering", "utrecht-001")

let $roxit := map:map()
=&gt;map:with("oin", "00000001003214345000")
=&gt;map:with("idlevering", "roxit")

let $zuiderzee := map:map()
=&gt;map:with("oin", "00000003560458830000")
=&gt;map:with("idlevering", "Geonovum-wsv-Zuiderzeeland-MultigeometrieAanvulling-6")
  
let $map := $gemeentestad
  
return (
  kv:maak-kruisvalidatie-rapport(map:get($map,"oin"), map:get($map, "idlevering"))
)
</query><query name="Maak validatie rapport" focus="false" listorder="11" taborder="12" active="true" database="80880676294143955" server="9495204545860005312" database-name="hackaton-content" server-name="hackaton" mode="xquery" optimize="">xquery version "1.0-ml";
import module namespace kv = "http://hackaton.com/kruisvalidaties/rapport" at "/ext/kruisvalidaties/rapport.xqy";

declare option xdmp:mapping "false";

let $gemeentestad := map:map()
=&gt;map:with("oin", "00000003560458830000")
=&gt;map:with("idlevering", "/opera/idlevering/Geonovum-Omgevingsplan-Zaltbommel_004")

let $opdracht-utrecht := map:map()
=&gt;map:with("oin", "00000003560458830000")
=&gt;map:with("idlevering", "VBPU0001-001")

let $utrecht := map:map()
=&gt;map:with("oin", "00000001003214345000")
=&gt;map:with("idlevering", "utrecht-001")

let $roxit := map:map()
=&gt;map:with("oin", "00000001003214345000")
=&gt;map:with("idlevering", "roxit")

let $zuiderzee := map:map()
=&gt;map:with("oin", "00000003560458830000")
=&gt;map:with("idlevering", "Geonovum-wsv-Zuiderzeeland-MultigeometrieAanvulling-6")
  
let $map := $zuiderzee

return kv:maak-kruisvalidatie-rapport(map:get($map,"oin"), map:get($map, "idlevering"))
</query><query name="Validate Object Typen Manifest OW" focus="false" listorder="12" taborder="6" active="true" database="80880676294143955" server="9495204545860005312" database-name="hackaton-content" server-name="hackaton" mode="sparql" optimize="">## query
PREFIX imow: &lt;http://koop.overheid.nl/ontology/imow/&gt;
prefix rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;
prefix rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;

SELECT distinct ?type
WHERE {
  ?aanlevering rdf:type imow:Aanlevering ;
               imow:heeftBestand ?bestand .
  ?bestand rdf:type imow:Bestand ;
           imow:heeftObjectType ?objectType .
  ?objectType rdfs:label ?type
  MINUS {
    SELECT ?type
    WHERE {
      ?bestand rdf:type imow:owBestand ;
               imow:heeftObjectType ?objectType .
      ?objectType rdfs:label ?type .
    }    
  }
}</query><query name="Query 11" focus="false" listorder="13" taborder="13" active="true" database="80880676294143955" server="9495204545860005312" database-name="hackaton-content" server-name="hackaton" mode="xquery" optimize="1">xquery version "1.0-ml";
import module namespace kv = "http://hackaton.com/kruisvalidaties/rapport" at "/ext/kruisvalidaties/rapport.xqy";

declare option xdmp:mapping "false";
declare variable $SPARQL-PREFIX as xs:string := '
PREFIX lvbb: &lt;http://koop.overheid.nl/ontology/lvbb/&gt;
PREFIX imow: &lt;http://www.geostandaarden.nl/imow/&gt;
PREFIX rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;
PREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;
PREFIX imowType: &lt;http://www.geostandaarden.nl/imow/objecttype/&gt;
';
declare variable $SPARQL-REFERENTIES-PER-DOEL as xs:string :=  $SPARQL-PREFIX || '
SELECT ?object ?label ?type
WHERE {
  ?object rdfs:label ?label ;
            rdf:type ?type
}
';

let $gemeentestad := map:map()
=&gt;map:with("oin", "00000003560458830000")
=&gt;map:with("idlevering", "/opera/idlevering/Geonovum-Omgevingsplan-Zaltbommel_004")

let $opdracht-utrecht := map:map()
=&gt;map:with("oin", "00000003560458830000")
=&gt;map:with("idlevering", "VBPU0001-001")

let $utrecht := map:map()
=&gt;map:with("oin", "00000001003214345000")
=&gt;map:with("idlevering", "utrecht-001")

let $roxit := map:map()
=&gt;map:with("oin", "00000001003214345000")
=&gt;map:with("idlevering", "roxit")

let $zuiderzee := map:map()
=&gt;map:with("oin", "00000003560458830000")
=&gt;map:with("idlevering", "Geonovum-wsv-Zuiderzeeland-MultigeometrieAanvulling-6")
  
let $map := $roxit

let $query := cts:collection-query((
  fn:concat("/opera/oin/", map:get($map, "oin")),
  fn:concat("/opera/idlevering/", map:get($map, "idlevering")),
  "/opera/options/opdrachtbestanden",
  "/graph/imow-ontology"
))
let $store := (sem:store("document", $query), sem:store("properties", $query))

let $doelen :=  sem:sparql($SPARQL-REFERENTIES-PER-DOEL, (), ("map"), $store)
return $doelen</query><query name="Query 12" focus="false" listorder="14" taborder="14" active="true" database="80880676294143955" server="9495204545860005312" database-name="hackaton-content" server-name="hackaton" mode="xquery" optimize="1">xquery version "1.0-ml";
import module namespace tde = "http://marklogic.com/xdmp/tde" at "/MarkLogic/tde.xqy";

let $tde := xdmp:unquote(xdmp:filesystem-file('/data/src/main/ml-schemas/tdej/besluit.tdej'))

return tde:validate($tde)</query><query name="Query 13" focus="false" listorder="15" taborder="15" active="true" database="80880676294143955" server="9495204545860005312" database-name="hackaton-content" server-name="hackaton" mode="sparql" optimize="1">## query
PREFIX lvbb: &lt;http://koop.overheid.nl/ontology/lvbb/&gt;
PREFIX imow: &lt;http://koop.overheid.nl/ontology/imow/&gt;
PREFIX rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;
PREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;

SELECT distinct ?objectType ?type
WHERE {
  ?bestand rdf:type imow:Bestand ;
           imow:heeftObjectType ?objectType .
  ?objectType rdfs:label ?type .
}</query><query name="Query 14" focus="false" listorder="16" taborder="16" active="true" database="80880676294143955" server="9495204545860005312" database-name="hackaton-content" server-name="hackaton" mode="sparql" optimize="1">## query
PREFIX lvbb: &lt;http://koop.overheid.nl/ontology/lvbb/&gt;
PREFIX imow: &lt;http://koop.overheid.nl/ontology/imow/&gt;
PREFIX rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;
PREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;

SELECT distinct ?objectType ?type
WHERE {
  ?aanlevering rdf:type imow:Aanlevering ;
               imow:heeftBestand ?bestand .
  ?bestand rdf:type imow:Bestand ;
           imow:heeftObjectType ?objectType .
  ?objectType rdfs:label ?type
}
  </query><query name="Query 15" focus="false" listorder="17" taborder="17" active="true" database="80880676294143955" server="9495204545860005312" database-name="hackaton-content" server-name="hackaton" mode="xquery" optimize="1">xquery version "1.0-ml";
import module namespace kv = "http://hackaton.com/kruisvalidaties/rapport" at "/ext/kruisvalidaties/rapport.xqy";

declare variable $SPARQL-REFERENTIES-PER-REGELING as xs:string :=
$kv:SPARQL-PREFIX || '
SELECT ?regelingId ?wId ?regeltekstId
WHERE {
  ?owAanlevering imow:linkToDoel ?doel ;
                 imow:heeftBestand ?owLink ;
                 imow:linkToRegelingObject ?regeling .
  ?doel dc:identifier @doelId .
  ?regeling dc:identifier ?regelingId ;
            rdf:type lvbb:Regeling .
  ?owBestand imow:linkToManifestBestand ?owLink ;
           rdf:type imow:owBestand ;
           imow:heeftRegeltekst ?regeltekst .
  ?regeltekst rdf:type imow:Regeltekst ;
              dc:identifier ?regeltekstId ;
              imow:linkToWId ?wRef .
  OPTIONAL { ?wRef dc:identifier ?wId . }
}
ORDER BY ?regelingId ?regeltekstId
';

let $gemeentestad := map:map()
=&gt;map:with("oin", "00000003560458830000")
=&gt;map:with("idlevering", "Geonovum-Omgevingsplan-Zaltbommel_004")

let $opdracht-utrecht := map:map()
=&gt;map:with("oin", "00000003560458830000")
=&gt;map:with("idlevering", "VBPU0001-001")

let $utrecht := map:map()
=&gt;map:with("oin", "00000001003214345000")
=&gt;map:with("idlevering", "utrecht-001")

let $roxit := map:map()
=&gt;map:with("oin", "00000001003214345000")
=&gt;map:with("idlevering", "roxit")

let $zuiderzee := map:map()
=&gt;map:with("oin", "00000003560458830000")
=&gt;map:with("idlevering", "Geonovum-wsv-Zuiderzeeland-MultigeometrieAanvulling-6")

let $zuiderzeeland := map:map()
=&gt;map:with("oin", "00000003011411800000")
=&gt;map:with("idlevering", "Zuiderzeeland")
    
let $map := $zuiderzee

let $query := cts:or-query((
  cts:and-query((
    cts:collection-query(fn:concat("/opera/oin/", map:get($map, "oin"))),
    cts:collection-query(fn:concat("/opera/idlevering/", map:get($map, "idlevering"))),
    cts:collection-query("/opera/options/opdrachtbestanden")
  )),
  cts:collection-query("/graph/imow-ontology")
))
let $stores := (sem:store("document", $query), sem:store("properties", $query))
return ($query,
  let $doelen := sem:sparql($kv:SPARQL-REFERENTIES-PER-DOEL, (), ("map"), $stores)
  for $doel in $doelen
  return (
    sem:sparql($kv:SPARQL-GEOMETRIE-IDENTIFICATIES, $doel, (), $stores),
    sem:sparql($SPARQL-REFERENTIES-PER-REGELING, $doel, (), $stores)
  )
)
</query><query name="Query 16" focus="false" listorder="18" taborder="18" active="true" database="80880676294143955" server="9495204545860005312" database-name="hackaton-content" server-name="hackaton" mode="xquery" optimize="1">xquery version "1.0-ml";
xdmp:collection-delete('/opera/options/opdrachtbestanden')</query></workspace></export>
